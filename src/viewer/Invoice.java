/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.CalMaster;
import com.Messages;
import com.userstatus;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.db;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author LasithaRanawaka
 */
public class Invoice extends javax.swing.JFrame {

    /**
     * Creates new form gin
     */
    public Invoice() {
        initComponents();
        FirstLoad();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_InvoiceNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        date_Invoice = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        cmb_Customer = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txt_Total = new javax.swing.JTextField();
        btn_Submit = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmb_Types = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Gin = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        txt_ItemID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_ItemName = new javax.swing.JTextField();
        txt_SellPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_Qty = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_Discount = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        lblSellDis = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Invoice");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Invoice No");

        txt_InvoiceNo.setEditable(false);
        txt_InvoiceNo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txt_InvoiceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_InvoiceNoKeyPressed(evt);
            }
        });

        jLabel2.setText("Date");

        jLabel3.setText("Customer name");

        cmb_Customer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmb_CustomerKeyPressed(evt);
            }
        });

        jLabel4.setText("Total");

        txt_Total.setEditable(false);

        btn_Submit.setText("Submit");
        btn_Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SubmitActionPerformed(evt);
            }
        });
        btn_Submit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_SubmitKeyPressed(evt);
            }
        });

        jLabel10.setText("Type");

        cmb_Types.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmb_TypesKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_InvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(cmb_Customer, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(cmb_Types, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(87, 87, 87)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_Total)
                    .addComponent(date_Invoice, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addGap(82, 82, 82)
                .addComponent(btn_Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(date_Invoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(cmb_Types, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmb_Customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txt_InvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbl_Gin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Sell", "Qty", "Discount", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Gin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbl_GinKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_Gin);
        tbl_Gin.getColumnModel().getColumn(0).setMinWidth(0);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txt_ItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_ItemIDKeyPressed(evt);
            }
        });

        jLabel5.setText("Item ID");

        jLabel6.setText("Item Name");

        txt_ItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_ItemNameKeyPressed(evt);
            }
        });

        txt_SellPrice.setEditable(false);

        jLabel7.setText("Sell Price");

        jLabel8.setText("Qty");

        txt_Qty.setText("0.0");
        txt_Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_QtyKeyPressed(evt);
            }
        });

        jLabel9.setText("Discount (%)");

        txt_Discount.setText("0.0");
        txt_Discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyReleased(evt);
            }
        });

        jLabel13.setText("Dis.SellinPrice");

        lblSellDis.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSellDis.setText("0.0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txt_ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txt_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_SellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(txt_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSellDis, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_Discount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txt_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txt_SellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txt_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txt_Discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lblSellDis))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_InvoiceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_InvoiceNoKeyPressed

        if (evt.getKeyCode() == 10) {
            if (!txt_InvoiceNo.getText().isEmpty()) {
                cmb_Customer.grabFocus();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_InvoiceNoKeyPressed

    private void cmb_CustomerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_CustomerKeyPressed
        if (evt.getKeyCode() == 10) {
            if (cmb_Customer.getSelectedIndex() != 0) {
                txt_ItemName.grabFocus();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_CustomerKeyPressed

    private void txt_ItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_ItemNameKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txt_ItemName.getText().isEmpty()) {

                try {
                    ResultSet rs = model.db.fetch("SELECT\n"
                            + "items.id,\n"
                            + "items.`name`,\n"
                            + "items.cost,\n"
                            + "items.sell,\n"
                            + "items.`status`\n"
                            + "FROM\n"
                            + "items\n"
                            + "WHERE\n"
                            + "items.`name` like '%" + txt_ItemName.getText() + "%' and status='0'");

                    while (rs.next()) {
                        txt_ItemID.setText("" + rs.getInt(1));
                        txt_SellPrice.setText("" + rs.getDouble(4));
                        txt_Qty.selectAll();
                        txt_Qty.grabFocus();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else if (evt.getKeyCode() == 113) {
            if (!txt_Total.getText().isEmpty() && tbl_Gin.getRowCount() != 0) {
                cmb_Types.grabFocus();
            }
        }
    }//GEN-LAST:event_txt_ItemNameKeyPressed

    private void txt_QtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_QtyKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txt_Qty.getText().isEmpty() && !txt_Qty.getText().equals("0") && !txt_Qty.getText().equals("0.0")) {
                txt_Discount.selectAll();
                txt_Discount.grabFocus();
            }
        }   // TODO add your handling code here:
    }//GEN-LAST:event_txt_QtyKeyPressed

    private void txt_DiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txt_Discount.getText().isEmpty() && !txt_Discount.getText().equals("0") && !txt_Qty.getText().equals("0.0")) {

                if (isItemAvailable()) {
                    JOptionPane.showMessageDialog(null, "This Item is Already Exist ! ");
                } else {
                    AddDataToTable();
                }
                clear(0);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_txt_DiscountKeyPressed

    private void txt_DiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyReleased
        if (!txt_ItemID.getText().isEmpty() && !txt_Qty.getText().isEmpty() && !txt_Discount.getText().isEmpty()) {
            ViewDiscountedPrice();
        } else {
            lblSellDis.setText("0.0");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txt_DiscountKeyReleased

    private void btn_SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SubmitActionPerformed
        if (!txt_InvoiceNo.getText().isEmpty() && cmb_Customer.getSelectedIndex() != 0) {
            SaveGIN();
        } else {
            JOptionPane.showMessageDialog(null, "Error Occur , Please Check InvoiceNo / CustomerName ! ");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_btn_SubmitActionPerformed

    private void tbl_GinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_GinKeyPressed
        if (tbl_Gin.getRowCount() != 0) {
            if (evt.getKeyCode() == 127) {
                DeleteTableItem();
            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                EditDataSelectedRow();
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_tbl_GinKeyPressed

    private void btn_SubmitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_SubmitKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txt_InvoiceNo.getText().isEmpty() && cmb_Customer.getSelectedIndex() != 0) {
                SaveGIN();
            } else {
                JOptionPane.showMessageDialog(null, "Error Occur , Please Check InvoiceNo / CustomerName ! ");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_SubmitKeyPressed

    private void cmb_TypesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_TypesKeyPressed
        if (evt.getKeyCode() == 10) {
            if (cmb_Types.getSelectedIndex() != 0 && !txt_Total.getText().isEmpty()) {
                btn_Submit.grabFocus();

            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_TypesKeyPressed

    private void txt_ItemIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_ItemIDKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txt_ItemID.getText().isEmpty()) {

                try {
                    ResultSet rs = model.db.fetch("SELECT\n"
                            + "items.id,\n"
                            + "items.`name`,\n"
                            + "items.cost,\n"
                            + "items.sell,\n"
                            + "items.`status`\n"
                            + "FROM\n"
                            + "items\n"
                            + "WHERE\n"
                            + "items.`id` like '%" + txt_ItemID.getText() + "%' and status='0'");

                    while (rs.next()) {
                        txt_ItemID.setText("" + rs.getInt(1));
                        txt_SellPrice.setText("" + rs.getDouble(4));
                        txt_ItemName.setText("" + rs.getString(2));
                        txt_Qty.selectAll();
                        txt_Qty.grabFocus();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else if (evt.getKeyCode() == 113) {
            if (!txt_Total.getText().isEmpty() && tbl_Gin.getRowCount() != 0) {
                cmb_Types.grabFocus();
            }
        }
    }//GEN-LAST:event_txt_ItemIDKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Submit;
    private javax.swing.JComboBox cmb_Customer;
    private javax.swing.JComboBox cmb_Types;
    private com.toedter.calendar.JDateChooser date_Invoice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSellDis;
    private javax.swing.JTable tbl_Gin;
    private javax.swing.JTextField txt_Discount;
    private javax.swing.JTextField txt_InvoiceNo;
    private javax.swing.JTextField txt_ItemID;
    private javax.swing.JTextField txt_ItemName;
    private javax.swing.JTextField txt_Qty;
    private javax.swing.JTextField txt_SellPrice;
    private javax.swing.JTextField txt_Total;
    // End of variables declaration//GEN-END:variables

    private void SetGINNo() {
        try {
            ResultSet rs = model.db.fetch("select max(id) from ginreg");
            txt_InvoiceNo.setText("1");
            if (rs.next()) {

                if (rs.getString(1) != null) {
                    int num = Integer.parseInt(rs.getString(1));
                    num++;
                    txt_InvoiceNo.setText("" + num);
                }

            }
            txt_InvoiceNo.grabFocus();


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FirstLoad() {

        txt_InvoiceNo.grabFocus();
        LoadCustomers();
        today();
        loaditemName();
        loaditemid();
        SetGINNo();
        LoadTypes();

    }

    private void today() {
        Date datenow = new Date();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        StringBuilder sb = new StringBuilder(sdf.format(datenow));
        date_Invoice.setDate(datenow);
        txt_InvoiceNo.grabFocus();

    }

    private void LoadCustomers() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmb_Customer.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "customer.`name`\n"
                    + "FROM\n"
                    + "customer\n"
                    + "WHERE\n"
                    + "customer.`status` = '0'");

            while (rs.next()) {
                dcbm.addElement(rs.getString(1));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loaditemName() {
//        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbItemName.getModel();
//        dcbm.removeAllElements();
//
//        try {
//            dcbm.addElement("--All Items--");
//            ResultSet rs = model.db.fetch("SELECT\n"
//                    + "items.`name`\n"
//                    + "FROM\n"
//                    + "items\n"
//                    + "WHERE\n"
//                    + "items.`status` = '0'");
//            while (rs.next()) {
//
//                dcbm.addElement(rs.getString(1));
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

        List<String> li = new ArrayList<String>();

        try {
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.`name`\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.`status` = '0'");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txt_ItemName, li, true);
    }

    private void AddDataToTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_Gin.getModel();

        int itemid = Integer.parseInt(txt_ItemID.getText());
        String name = txt_ItemName.getText();

        double sell = Double.parseDouble(txt_SellPrice.getText());
        double qty = Double.parseDouble(txt_Qty.getText());
        double discount = Double.parseDouble(txt_Discount.getText());
        double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, sell) * qty);

        Object arr[] = {itemid, name, sell, qty, discount, total};
        dtm.addRow(arr);

        double amounttot = 0.0; // get amout of table content

        for (int i = 0; i < tbl_Gin.getRowCount(); i++) {

            amounttot += Double.parseDouble(tbl_Gin.getValueAt(i, 5).toString());
            txt_Total.setText("" + amounttot);
        }
        clear(0);
    }

    private void ViewDiscountedPrice() {
        try {
            double cost = Double.parseDouble(txt_SellPrice.getText());
            double discount = Double.parseDouble(txt_Discount.getText());

            if (!txt_Discount.getText().isEmpty()) {
                double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, cost));
                lblSellDis.setText("" + total);
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void clear(int a) {

        txt_ItemID.setText(null);
        txt_ItemName.setText(null);
        txt_SellPrice.setText(null);
        txt_Qty.setText("0.0");
        txt_Discount.setText("0.0");
        lblSellDis.setText("0.0");
        loaditemName();

        if (a == 1) { // clear all

            txt_Total.setText("0.0");
            txt_InvoiceNo.setText(null);
            LoadCustomers();
            LoadTypes();
            today();
            cmb_Customer.grabFocus();
            DefaultTableModel dtm = (DefaultTableModel) tbl_Gin.getModel();
            dtm.setRowCount(0);

        } else {

            txt_ItemName.grabFocus();
        }
    }

    private void SaveGIN() {

        if (tbl_Gin.getRowCount() != 0 && !txt_Total.getText().isEmpty()) {



            String gin_id = txt_InvoiceNo.getText();

            int customer_id = 0;
            try {
                ResultSet rs = model.db.fetch("select * from  customer where name='" + cmb_Customer.getSelectedItem() + "'");
                if (rs.next()) {
                    customer_id = Integer.parseInt(rs.getString(1));
                    System.out.println(customer_id);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            double ret_tot = 0.0;
            double grand_tot = 0.0;
            int status = 0;
            int type = 1;

            if (cmb_Types.getSelectedIndex() != 0) {
                type = cmb_Types.getSelectedIndex();
            }

            String ret_time = "0000-00-00 00:00:00";

            try {
                db.change("insert into ginreg(id,date,total,ret_tot,grand_tot,ret_time,status,customer_id,user_name,type) "
                        + "values('" + gin_id.trim() + "',NOW()," + txt_Total.getText().trim() + "," + ret_tot + "," + grand_tot + ",'" + ret_time + "','" + status + "','" + customer_id + "','" + userstatus.LodUser.trim() + "','" + type + "')");
            } catch (Exception e) {
                e.printStackTrace();
            }


            try {

                for (int i = 0; i < tbl_Gin.getRowCount(); i++) {



                    double sell = Double.parseDouble(tbl_Gin.getValueAt(i, 2).toString());
                    double qty = Double.parseDouble(tbl_Gin.getValueAt(i, 3).toString());
                    double discount = Double.parseDouble(tbl_Gin.getValueAt(i, 4).toString());
                    double tot = Double.parseDouble(tbl_Gin.getValueAt(i, 5).toString());
                    int itemid = Integer.parseInt(tbl_Gin.getValueAt(i, 0).toString());
                    double cost = GetCostPriceOfItem(itemid);
                    double ret_qty = 0.0;

                    db.change("insert into gin(ginreg_id,items_id,qty,ret_qty,cost,sell,disount,tot) "
                            + "values('" + gin_id.trim() + "','" + itemid + "','" + qty + "','" + ret_qty + "','" + cost + "','" + sell + "','" + discount + "','" + tot + "')");

                }


            } catch (Exception e) {
                e.printStackTrace();
            }

            Messages.datasaved();
            clear(1);
            SetGINNo();
        }


    }

    private double GetCostPriceOfItem(int id) {

        double cost = 0.0;

        try {
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.cost\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.id = '" + id + "'");

            if (rs.next()) {
                cost = Double.parseDouble(rs.getString(1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cost;
    }

    private void DeleteTableItem() {
        if (tbl_Gin.getRowCount() != 0) {

            DefaultTableModel tbl = (DefaultTableModel) tbl_Gin.getModel();
            tbl.removeRow(tbl_Gin.getSelectedRow());

            double amounttot = 0.0;

            for (int i = 0; i < tbl_Gin.getRowCount(); i++) {

                amounttot += Double.parseDouble(tbl_Gin.getValueAt(i, 6).toString());
                txt_Total.setText("" + amounttot);
            }

            if (tbl_Gin.getRowCount() == 0) {
                txt_Total.setText("0.0");
            }

            txt_ItemName.grabFocus();
        }
    }

    private void EditDataSelectedRow() {
        try {
            double sell = Double.parseDouble(tbl_Gin.getValueAt(tbl_Gin.getSelectedRow(), 2).toString());
            double qty = Double.parseDouble(tbl_Gin.getValueAt(tbl_Gin.getSelectedRow(), 3).toString());
            double discount = Double.parseDouble(tbl_Gin.getValueAt(tbl_Gin.getSelectedRow(), 4).toString());
            double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, sell) * qty);

            tbl_Gin.setValueAt(total, tbl_Gin.getSelectedRow(), 5);

            double amounttot = 0.0; // get amout of table content

            for (int i = 0; i < tbl_Gin.getRowCount(); i++) {
                amounttot += Double.parseDouble(tbl_Gin.getValueAt(i, 5).toString());
                txt_Total.setText("" + amounttot);
            }
            txt_ItemName.grabFocus();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean isItemAvailable() {
        boolean bol = false;

        String itemid = txt_ItemID.getText();

        for (int i = 0; i < tbl_Gin.getRowCount(); i++) {

            String value = tbl_Gin.getValueAt(i, 0).toString();
            if (itemid.equals(value)) {
                bol = true;
                break;
            }

        }
        return bol;
    }

    private void LoadTypes() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmb_Types.getModel();
        dcbm.removeAllElements();

        dcbm.addElement("--Select--");
        dcbm.addElement("Credit");
        dcbm.addElement("Cash");
        //dcbm.addElement("Cheque");


    }

    private void loaditemid() {
        List<String> li = new ArrayList<String>();

        try {
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.`id`\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.`status` = '0'");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txt_ItemID, li, true);
    }
}
