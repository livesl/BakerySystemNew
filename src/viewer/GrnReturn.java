/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.CalMaster;
import com.Messages;
import com.userstatus;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.db;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author LasithaRanawaka
 */
public class GrnReturn extends javax.swing.JFrame {

    /**
     * Creates new form grn
     */
    public GrnReturn() {
        initComponents();
        FirstLoad();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGrn = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCostPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        txtItemId = new javax.swing.JTextField();
        cmbItemName = new javax.swing.JComboBox();
        txtQty = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        lblDis = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtDiscountFinal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtGrandTotal = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbSupplirName = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GRN");

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Date");

        tblGrn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Cost Price", "Selling Price", "Discount (%)", "Qty", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGrn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGrnMouseClicked(evt);
            }
        });
        tblGrn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblGrnKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblGrn);
        tblGrn.getColumnModel().getColumn(4).setPreferredWidth(30);

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Item ID");

        jLabel5.setText("Item Name");

        jLabel6.setText("Cost Price");

        txtCostPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCostPriceKeyPressed(evt);
            }
        });

        jLabel7.setText("Selling Price");

        txtSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyPressed(evt);
            }
        });

        jLabel8.setText("Qty");

        jLabel9.setText("Discount (%)");

        txtDiscount.setText("0.0");
        txtDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiscountActionPerformed(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
        });

        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNameKeyPressed(evt);
            }
        });

        txtItemId.setEditable(false);
        txtItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemIdActionPerformed(evt);
            }
        });

        cmbItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbItemNameItemStateChanged(evt);
            }
        });

        txtQty.setText("0.0");
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
        });

        jLabel13.setText("Dis.CostPrice");

        lblDis.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDis.setText("0.0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDis, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(lblDis)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setText("Total");

        txtTotal.setEditable(false);
        txtTotal.setText("0.0");

        jLabel11.setText("Discount (%)");

        txtDiscountFinal.setText("0.0");
        txtDiscountFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountFinalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountFinalKeyReleased(evt);
            }
        });

        jLabel12.setText("Grand Total");

        txtGrandTotal.setEditable(false);
        txtGrandTotal.setText("0.0");

        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        btnSubmit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSubmitKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDiscountFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSubmit)
                .addGap(65, 65, 65))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtDiscountFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnSubmit)
                .addContainerGap(314, Short.MAX_VALUE))
        );

        jLabel3.setText("Supplier Name");

        cmbSupplirName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSupplirNameKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupplirName, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmbSupplirName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyPressed
        if (evt.getKeyCode() == 10) {

            if (!txtItemName.getText().isEmpty()) {



                try {
                    ResultSet rs = model.db.fetch("SELECT\n"
                            + "items.id,\n"
                            + "items.`name`,\n"
                            + "items.cost,\n"
                            + "items.sell,\n"
                            + "items.`status`\n"
                            + "FROM\n"
                            + "items\n"
                            + "WHERE\n"
                            + "items.`name` like '%" + txtItemName.getText() + "%' and status='0'");

                    while (rs.next()) {
                        txtItemId.setText("" + rs.getInt(1));
                        txtCostPrice.setText("" + rs.getDouble(3));
                        txtSellingPrice.setText("" + rs.getDouble(4));
                        txtCostPrice.grabFocus();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else if (evt.getKeyCode() == 113) {
            if (!txtTotal.getText().isEmpty() && !txtTotal.getText().equals("0.0")) {
                txtDiscountFinal.grabFocus();
                txtDiscountFinal.selectAll();
            }
        }
    }//GEN-LAST:event_txtItemNameKeyPressed

    private void cmbItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbItemNameItemStateChanged
        try {
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.id,\n"
                    + "items.`name`,\n"
                    + "items.cost,\n"
                    + "items.sell,\n"
                    + "items.`status`\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.`name` = '" + cmbItemName.getSelectedItem() + "'");
            while (rs.next()) {
                txtItemId.setText("" + rs.getInt(1));
                txtItemName.setText(rs.getString(2));
                txtCostPrice.setText("" + rs.getDouble(3));
                txtSellingPrice.setText("" + rs.getDouble(4));
                txtCostPrice.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_cmbItemNameItemStateChanged

    private void cmbSupplirNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplirNameKeyPressed
        if (evt.getKeyCode() == 10) {

            if (cmbSupplirName.getSelectedIndex() != 0) {
                txtItemName.grabFocus();

            }

        }
    }//GEN-LAST:event_cmbSupplirNameKeyPressed

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtCostPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostPriceKeyPressed
        if (evt.getKeyCode() == 10) {
            txtSellingPrice.grabFocus();

        }
    }//GEN-LAST:event_txtCostPriceKeyPressed

    private void txtSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyPressed
        if (evt.getKeyCode() == 10) {
            txtQty.grabFocus();
            txtQty.selectAll();
        }
    }//GEN-LAST:event_txtSellingPriceKeyPressed

    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        if (evt.getKeyCode() == 10) {
            txtDiscount.grabFocus();
            txtDiscount.selectAll();
        }
    }//GEN-LAST:event_txtQtyKeyPressed

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed

        if (evt.getKeyCode() == 10) {

            if (!txtItemId.getText().isEmpty() && !txtQty.getText().isEmpty() && !txtDiscount.getText().isEmpty()) {

//                if (isItemAvailable()) {
//                    JOptionPane.showMessageDialog(null, "This Item is Already Exist ! ");
//                } else {
                if (!txtQty.getText().equals("0") && !txtQty.getText().equals("0.0")) {
                    addtable();

                }

                //}
                clear(0);
            }

        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

//        if (!txtGrnId.getText().isEmpty() && cmbSupplirName.getSelectedIndex() != 0) {
//
//            if (isNotIDAlreadyExistInDB()) {
//                SaveGRN();
//            }
//
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Error Occur , Please Check GrnID / SupplirName ! ");
//        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void tblGrnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblGrnKeyPressed
        if (tblGrn.getRowCount() != 0) {
            if (evt.getKeyCode() == 127) {
                DeleteTableItem();
            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                EditDataSelectedRow();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tblGrnKeyPressed

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased
        if (!txtItemId.getText().isEmpty() && !txtQty.getText().isEmpty() && !txtDiscount.getText().isEmpty()) {
            ViewDiscountedPrice();
        } else {
            lblDis.setText("0.0");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountKeyReleased

    private void txtDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountActionPerformed

    private void txtDiscountFinalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountFinalKeyReleased
        if (!txtTotal.getText().isEmpty() && !txtTotal.getText().equals("0.0")) {
            if (!txtDiscountFinal.getText().isEmpty() && !txtDiscountFinal.getText().equals("0.0")) {
                TotalDiscount();
            } else {
                txtGrandTotal.setText("0.0");
            }

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountFinalKeyReleased

    private void txtDiscountFinalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountFinalKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!txtDiscountFinal.getText().isEmpty() && !txtDiscountFinal.getText().equals("0")) {
                TotalDiscount();
                btnSubmit.grabFocus();
            } else {
                JOptionPane.showMessageDialog(null, "Error Occur , Please Check !");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountFinalKeyPressed

    private void tblGrnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGrnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblGrnMouseClicked

    private void btnSubmitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSubmitKeyPressed
//        if (evt.getKeyCode() == 10) {
//
//
//            if (!txtGrnId.getText().isEmpty() && cmbSupplirName.getSelectedIndex() != 0) {
//                if (isNotIDAlreadyExistInDB()) {
//                    SaveGRN();
//                }
//            } else {
//                JOptionPane.showMessageDialog(null, "Error Occur , Please Check GrnID / SupplirName ! ");
//            }
//        }// TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitKeyPressed

    private void txtItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrnReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrnReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrnReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrnReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GrnReturn().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cmbItemName;
    private javax.swing.JComboBox cmbSupplirName;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDis;
    private javax.swing.JTable tblGrn;
    private javax.swing.JTextField txtCostPrice;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtDiscountFinal;
    private javax.swing.JTextField txtGrandTotal;
    private javax.swing.JTextField txtItemId;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSellingPrice;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void loadSupplierName() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbSupplirName.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--Select--");
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "supplier.`name`\n"
                    + "FROM\n"
                    + "supplier\n"
                    + "WHERE\n"
                    + "supplier.`status` = '0'");

            while (rs.next()) {
                dcbm.addElement(rs.getString(1));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void today() {
        Date datenow = new Date();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        StringBuilder sb = new StringBuilder(sdf.format(datenow));
        jDateChooser1.setDate(datenow);
      //  txtGrnId.grabFocus();

    }

    private void loadItemId() {
//        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbItemID.getModel();
//        try {
//            dcbm.addElement("--Select--");
//            ResultSet rs = model.db.fetch("SELECT\n"
//                    + "items.id\n"
//                    + "FROM\n"
//                    + "items");
//            while (rs.next()) {
//
//                dcbm.addElement(rs.getInt(1));
//            }
//        } catch (Exception e) {
//        }
    }

    private void loaditemName() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cmbItemName.getModel();
        dcbm.removeAllElements();

        try {
            dcbm.addElement("--All Items--");
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.`name`\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.`status` = '0'");
            while (rs.next()) {

                dcbm.addElement(rs.getString(1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        List<String> li = new ArrayList<String>();

        try {
            ResultSet rs = model.db.fetch("SELECT\n"
                    + "items.`name`\n"
                    + "FROM\n"
                    + "items\n"
                    + "WHERE\n"
                    + "items.`status` = '0'");
            while (rs.next()) {
                li.add(rs.getString(1));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        AutoCompleteDecorator.decorate(txtItemName, li, true);
    }

    private void addtable() {
        DefaultTableModel dtm = (DefaultTableModel) tblGrn.getModel();

        int itemid = Integer.parseInt(txtItemId.getText());
        String name = txtItemName.getText();
        double cost = Double.parseDouble(txtCostPrice.getText());
        double sell = Double.parseDouble(txtSellingPrice.getText());
        double qty = Double.parseDouble(txtQty.getText());
        double discount = Double.parseDouble(txtDiscount.getText());
        double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, cost) * qty);

        Object arr[] = {itemid, name, cost, sell, discount, qty, total};
        dtm.addRow(arr);

        double amounttot = 0.0; // get amout of table content

        for (int i = 0; i < tblGrn.getRowCount(); i++) {

            amounttot += Double.parseDouble(tblGrn.getValueAt(i, 6).toString());
            txtTotal.setText("" + amounttot);
        }


    }

    public void clear(int a) {

        txtItemId.setText(null);
        txtItemName.setText(null);
        txtCostPrice.setText(null);
        txtSellingPrice.setText(null);
        txtQty.setText("0.0");
        txtDiscount.setText("0.0");
        lblDis.setText("0.0");
        loaditemName();

        if (a == 1) { // clear all

            txtTotal.setText("0.0");
            txtDiscountFinal.setText("0.0");
            txtGrandTotal.setText("0.0");
          //  txtGrnId.setText(null);
            loadSupplierName();
            today();
          //  txtGrnId.grabFocus();
            DefaultTableModel dtm = (DefaultTableModel) tblGrn.getModel();
            dtm.setRowCount(0);

        } else {

            txtItemName.grabFocus();
        }
    }

    private void ViewDiscountedPrice() {
        try {
            double cost = Double.parseDouble(txtCostPrice.getText());
            double discount = Double.parseDouble(txtDiscount.getText());

            if (!txtDiscount.getText().isEmpty()) {
                double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, cost));
                lblDis.setText("" + total);
            }


        } catch (Exception e) {
            System.out.println("ViewDiscountedPrice  " + e);
        }
    }

    private void DeleteTableItem() {
        if (tblGrn.getRowCount() != 0) {

            DefaultTableModel tbl = (DefaultTableModel) tblGrn.getModel();
            tbl.removeRow(tblGrn.getSelectedRow());

            double amounttot = 0.0;

            for (int i = 0; i < tblGrn.getRowCount(); i++) {

                amounttot += Double.parseDouble(tblGrn.getValueAt(i, 6).toString());
                txtTotal.setText("" + amounttot);
            }

            if (tblGrn.getRowCount() == 0) {
                txtTotal.setText("0.0");
            }

            txtItemName.grabFocus();
        }
    }

//    private boolean isItemAvailable() {
//
//        boolean bol = false;
//
//        String itemid = txtItemId.getText();
//
//        for (int i = 0; i < tblGrn.getRowCount(); i++) {
//
//            String value = tblGrn.getValueAt(i, 0).toString();
//            if (itemid.equals(value)) {
//                bol = true;
//                break;
//            }
//
//        }
//        return bol;
//    }
    private void TotalDiscount() {
        try {
            double price = Double.parseDouble(txtTotal.getText());
            double dislast = Double.parseDouble(txtDiscountFinal.getText());
            txtGrandTotal.setText("" + CalMaster.DiscountPrecent(dislast, price));

        } catch (Exception e) {
            System.out.println("TotalDiscount  " + e);
        }
    }

    private void EditDataSelectedRow() {
        try {
            double cost = Double.parseDouble(tblGrn.getValueAt(tblGrn.getSelectedRow(), 2).toString());
            double qty = Double.parseDouble(tblGrn.getValueAt(tblGrn.getSelectedRow(), 5).toString());
            double discount = Double.parseDouble(tblGrn.getValueAt(tblGrn.getSelectedRow(), 4).toString());
            double total = Double.parseDouble("" + CalMaster.DiscountPrecent(discount, cost) * qty);

            tblGrn.setValueAt(total, tblGrn.getSelectedRow(), 6);

            double amounttot = 0.0; // get amout of table content

            for (int i = 0; i < tblGrn.getRowCount(); i++) {
                amounttot += Double.parseDouble(tblGrn.getValueAt(i, 6).toString());
                txtTotal.setText("" + amounttot);
            }
            txtItemName.grabFocus();

        } catch (Exception e) {
            System.out.println("EditDataSelectedRow  " + e);
        }
    }

    private void SaveGRN() {

//        if (tblGrn.getRowCount() != 0 && !txtGrandTotal.getText().isEmpty()) {
//
//
//
//            String grn_id = txtGrnId.getText();
//
//            int supplier_id = 0;
//            try {
//                ResultSet rs = model.db.fetch("select * from  supplier where name='" + cmbSupplirName.getSelectedItem() + "'");
//                if (rs.next()) {
//
//                    supplier_id = Integer.parseInt(rs.getString("id"));
//                    System.out.println(supplier_id);
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//            System.out.println(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss aa").format(jDateChooser1.getDate()));
//            try {
//
//
//
//                db.change("insert into grnreg(id,date,total,discount,grand_total,supplier_id,user_name) "
//                        + "values('" + grn_id.trim() + "','" + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(jDateChooser1.getDate()) + "'," + txtTotal.getText().trim() + "," + txtDiscountFinal.getText().trim() + "," + txtGrandTotal.getText().trim() + "," + supplier_id + ",'" + userstatus.LodUser.trim() + "')");
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//
//            try {
//
//                for (int i = 0; i < tblGrn.getRowCount(); i++) {
//
//
//                    double cost = Double.parseDouble(tblGrn.getValueAt(i, 2).toString());
//                    double sell = Double.parseDouble(tblGrn.getValueAt(i, 3).toString());
//                    double qty = Double.parseDouble(tblGrn.getValueAt(i, 5).toString());
//                    double discount = Double.parseDouble(tblGrn.getValueAt(i, 4).toString());
//
//                    int itemid = Integer.parseInt(tblGrn.getValueAt(i, 0).toString());
//
//                    db.change("insert into grn(cost,sell,qty,doscount,grnreg_id,items_id) "
//                            + "values('" + cost + "','" + sell + "','" + qty + "','" + discount + "','" + grn_id + "','" + itemid + "')");
//                    
//                    // batch item
//                     db.change("insert into batch_item(qty,rem_qty,grn_grnreg_id,grn_items_id) "
//                            + "values('" + qty + "','" + qty + "','" + grn_id + "','" + itemid + "')");
//
//                    
//                }
//
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            Messages.datasaved();
//            clear(1);
//        }

    }

    private void FirstLoad() {
        loadSupplierName();
        today();
        loadItemId();
        loaditemName();

    }

 //   private boolean isNotIDAlreadyExistInDB() {

//        boolean bol = true;
//        try {
//            ResultSet rs = model.db.fetch("SELECT\n"
//                    + "grnreg.id\n"
//                    + "FROM\n"
//                    + "grnreg\n"
//                    + "WHERE\n"
//                    + "grnreg.id = '"+txtGrnId.getText()+"'");
//            if (rs.next()) {
//                bol = false;
//                Messages.errorjoption("This GRN No Already Exist ! ");
////                txtGrnId.grabFocus();
////                txtGrnId.selectAll();
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//
//        return bol;
   }
